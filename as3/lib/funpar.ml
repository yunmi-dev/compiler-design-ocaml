type token =
  | COMMA
  | SEMICOLON
  | COLON
  | LPAREN
  | RPAREN
  | PLUS
  | MINUS
  | TIMES
  | LT
  | EQ
  | GT
  | AND
  | NOT
  | OR
  | WHILE
  | DO
  | REF
  | BANG
  | ASSIGN
  | IF
  | THEN
  | ELSE
  | LET
  | IN
  | FUN
  | ARROW
  | TYPE
  | UMINUS
  | EOF
  | ID of (string)
  | NUM of (int)
  | PROJ of (int)

open Parsing;;
let _ = parse_error;;
# 2 "lib/funpar.mly"

module A = Absyn
module S = Symbol

let start_pos = Parsing.symbol_start
let end_pos = Parsing.symbol_end

# 46 "lib/funpar.ml"
let yytransl_const = [|
  257 (* COMMA *);
  258 (* SEMICOLON *);
  259 (* COLON *);
  260 (* LPAREN *);
  261 (* RPAREN *);
  262 (* PLUS *);
  263 (* MINUS *);
  264 (* TIMES *);
  265 (* LT *);
  266 (* EQ *);
  267 (* GT *);
  268 (* AND *);
  269 (* NOT *);
  270 (* OR *);
  271 (* WHILE *);
  272 (* DO *);
  273 (* REF *);
  274 (* BANG *);
  275 (* ASSIGN *);
  276 (* IF *);
  277 (* THEN *);
  278 (* ELSE *);
  279 (* LET *);
  280 (* IN *);
  281 (* FUN *);
  282 (* ARROW *);
  283 (* TYPE *);
  284 (* UMINUS *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  285 (* ID *);
  286 (* NUM *);
  287 (* PROJ *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\003\000\004\000\004\000\004\000\004\000\
\004\000\004\000\005\000\005\000\007\000\007\000\006\000\006\000\
\006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
\006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
\006\000\006\000\006\000\006\000\006\000\006\000\006\000\000\000"

let yylen = "\002\000\
\002\000\001\000\002\000\011\000\001\000\002\000\003\000\003\000\
\002\000\003\000\001\000\003\000\001\000\003\000\003\000\001\000\
\001\000\002\000\002\000\004\000\002\000\002\000\003\000\003\000\
\003\000\003\000\003\000\002\000\003\000\003\000\002\000\003\000\
\003\000\003\000\006\000\004\000\004\000\003\000\006\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\040\000\000\000\000\000\000\000\001\000\
\003\000\000\000\000\000\000\000\000\000\000\000\005\000\000\000\
\000\000\006\000\000\000\000\000\000\000\009\000\000\000\010\000\
\000\000\007\000\000\000\000\000\012\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\016\000\017\000\000\000\000\000\000\000\022\000\031\000\000\000\
\000\000\000\000\000\000\019\000\000\000\000\000\000\000\018\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\015\000\000\000\032\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\
\020\000\000\000\000\000\000\000\000\000"

let yydgoto = "\002\000\
\004\000\005\000\006\000\019\000\020\000\048\000\049\000"

let yysindex = "\004\000\
\242\254\000\000\250\254\000\000\046\000\242\254\049\255\000\000\
\000\000\026\255\055\255\020\255\020\255\016\255\000\000\251\254\
\042\255\000\000\040\255\054\255\057\255\000\000\020\255\000\000\
\020\255\000\000\020\255\252\254\000\000\046\255\089\255\089\255\
\089\255\060\255\089\255\089\255\089\255\089\255\089\255\041\255\
\000\000\000\000\089\255\127\001\200\255\000\000\000\000\181\255\
\063\255\107\255\221\255\000\000\075\255\140\255\071\255\000\000\
\089\255\020\255\089\255\089\255\089\255\089\255\089\255\089\255\
\089\255\089\255\089\255\000\000\089\255\000\000\089\255\089\255\
\089\255\235\255\252\254\113\001\044\255\044\255\075\255\011\255\
\011\255\107\255\107\255\141\001\000\000\235\255\159\255\121\255\
\000\000\089\255\089\255\235\255\127\001"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\082\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\073\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\016\000\000\000\000\000\000\000\076\255\
\000\000\151\000\000\000\000\000\051\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\021\001\026\000\000\000\101\000\126\000\076\000\176\000\
\201\000\226\000\251\000\039\001\000\000\046\001\071\001\000\000\
\000\000\000\000\000\000\064\001\089\001"

let yygindex = "\000\000\
\000\000\080\000\000\000\027\000\063\000\227\255\023\000"

let yytablesize = 667
let yytable = "\021\000\
\008\000\044\000\045\000\046\000\001\000\050\000\051\000\052\000\
\053\000\054\000\003\000\022\000\022\000\056\000\059\000\004\000\
\060\000\061\000\062\000\013\000\023\000\023\000\007\000\013\000\
\014\000\033\000\018\000\074\000\014\000\076\000\077\000\078\000\
\079\000\080\000\081\000\082\000\083\000\084\000\016\000\017\000\
\025\000\086\000\087\000\088\000\015\000\008\000\024\000\059\000\
\015\000\028\000\021\000\062\000\010\000\030\000\011\000\031\000\
\022\000\012\000\022\000\027\000\092\000\093\000\022\000\032\000\
\026\000\023\000\033\000\023\000\034\000\055\000\047\000\023\000\
\035\000\070\000\036\000\023\000\037\000\038\000\059\000\039\000\
\073\000\002\000\040\000\011\000\075\000\009\000\013\000\029\000\
\041\000\042\000\043\000\085\000\032\000\000\000\000\000\033\000\
\000\000\034\000\000\000\000\000\024\000\035\000\000\000\036\000\
\000\000\037\000\038\000\000\000\039\000\000\000\059\000\040\000\
\060\000\061\000\062\000\063\000\064\000\041\000\042\000\043\000\
\000\000\000\000\057\000\058\000\059\000\025\000\060\000\061\000\
\062\000\063\000\064\000\000\000\065\000\000\000\066\000\000\000\
\000\000\000\000\000\000\067\000\000\000\057\000\058\000\059\000\
\091\000\060\000\061\000\062\000\063\000\064\000\028\000\065\000\
\000\000\066\000\000\000\000\000\000\000\000\000\067\000\000\000\
\072\000\058\000\059\000\000\000\060\000\061\000\062\000\063\000\
\064\000\000\000\065\000\000\000\066\000\000\000\000\000\027\000\
\000\000\067\000\000\000\000\000\090\000\069\000\057\000\058\000\
\059\000\000\000\060\000\061\000\062\000\063\000\064\000\000\000\
\065\000\000\000\066\000\000\000\000\000\000\000\000\000\067\000\
\026\000\057\000\058\000\059\000\068\000\060\000\061\000\062\000\
\063\000\064\000\000\000\065\000\000\000\066\000\000\000\000\000\
\000\000\000\000\067\000\000\000\000\000\000\000\057\000\058\000\
\059\000\029\000\060\000\061\000\062\000\063\000\064\000\000\000\
\065\000\000\000\066\000\000\000\071\000\058\000\059\000\067\000\
\060\000\061\000\062\000\063\000\064\000\000\000\065\000\000\000\
\066\000\000\000\030\000\000\000\000\000\067\000\000\000\000\000\
\000\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\008\000\008\000\008\000\008\000\008\000\000\000\008\000\000\000\
\008\000\000\000\000\000\008\000\038\000\008\000\008\000\000\000\
\008\000\008\000\033\000\033\000\033\000\033\000\033\000\033\000\
\033\000\033\000\033\000\033\000\033\000\033\000\034\000\033\000\
\004\000\033\000\000\000\000\000\033\000\037\000\033\000\033\000\
\000\000\033\000\033\000\021\000\021\000\021\000\000\000\021\000\
\021\000\021\000\021\000\021\000\021\000\021\000\021\000\035\000\
\021\000\000\000\021\000\000\000\000\000\021\000\036\000\021\000\
\021\000\000\000\021\000\021\000\023\000\023\000\023\000\000\000\
\023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
\039\000\023\000\000\000\023\000\000\000\000\000\023\000\000\000\
\023\000\023\000\000\000\023\000\023\000\024\000\024\000\024\000\
\000\000\024\000\024\000\024\000\000\000\024\000\024\000\024\000\
\024\000\000\000\024\000\000\000\024\000\000\000\000\000\024\000\
\000\000\024\000\024\000\000\000\024\000\024\000\025\000\025\000\
\025\000\000\000\025\000\025\000\025\000\000\000\025\000\025\000\
\025\000\025\000\000\000\025\000\000\000\025\000\000\000\000\000\
\025\000\000\000\025\000\025\000\000\000\025\000\025\000\028\000\
\028\000\028\000\000\000\028\000\000\000\000\000\000\000\000\000\
\000\000\028\000\028\000\000\000\028\000\000\000\028\000\000\000\
\000\000\028\000\000\000\028\000\028\000\000\000\028\000\028\000\
\027\000\027\000\027\000\000\000\027\000\000\000\000\000\000\000\
\000\000\000\000\027\000\027\000\000\000\027\000\000\000\027\000\
\000\000\000\000\027\000\000\000\027\000\027\000\000\000\027\000\
\027\000\026\000\026\000\026\000\000\000\026\000\000\000\000\000\
\000\000\000\000\000\000\026\000\026\000\000\000\026\000\000\000\
\026\000\000\000\000\000\026\000\000\000\026\000\026\000\000\000\
\026\000\026\000\029\000\029\000\029\000\000\000\029\000\000\000\
\000\000\000\000\000\000\000\000\029\000\029\000\000\000\029\000\
\000\000\029\000\000\000\000\000\029\000\000\000\029\000\029\000\
\000\000\029\000\029\000\030\000\030\000\030\000\000\000\030\000\
\000\000\000\000\000\000\000\000\000\000\030\000\030\000\000\000\
\030\000\000\000\030\000\000\000\000\000\030\000\000\000\030\000\
\030\000\000\000\030\000\030\000\000\000\038\000\038\000\000\000\
\000\000\038\000\000\000\000\000\000\000\000\000\000\000\038\000\
\000\000\000\000\000\000\000\000\038\000\000\000\000\000\034\000\
\034\000\038\000\038\000\034\000\038\000\038\000\037\000\037\000\
\000\000\034\000\037\000\000\000\000\000\000\000\034\000\000\000\
\037\000\000\000\000\000\034\000\034\000\037\000\034\000\034\000\
\035\000\035\000\037\000\037\000\035\000\037\000\037\000\036\000\
\036\000\000\000\035\000\036\000\000\000\000\000\000\000\035\000\
\000\000\036\000\000\000\000\000\035\000\035\000\036\000\035\000\
\035\000\039\000\000\000\036\000\000\000\039\000\036\000\036\000\
\000\000\000\000\000\000\039\000\000\000\000\000\000\000\000\000\
\039\000\000\000\000\000\000\000\000\000\039\000\039\000\000\000\
\039\000\039\000\057\000\058\000\059\000\089\000\060\000\061\000\
\062\000\063\000\064\000\000\000\065\000\000\000\066\000\000\000\
\057\000\058\000\059\000\067\000\060\000\061\000\062\000\063\000\
\064\000\000\000\065\000\000\000\066\000\000\000\000\000\058\000\
\059\000\067\000\060\000\061\000\062\000\063\000\064\000\000\000\
\065\000\000\000\066\000"

let yycheck = "\005\001\
\000\000\031\000\032\000\033\000\001\000\035\000\036\000\037\000\
\038\000\039\000\025\001\017\001\017\001\043\000\004\001\000\000\
\006\001\007\001\008\001\004\001\026\001\026\001\029\001\004\001\
\009\001\000\000\011\001\057\000\009\001\059\000\060\000\061\000\
\062\000\063\000\064\000\065\000\066\000\067\000\012\000\013\000\
\001\001\071\000\072\000\073\000\029\001\000\000\005\001\004\001\
\029\001\023\000\000\000\008\001\004\001\027\000\029\001\010\001\
\017\001\003\001\017\001\003\001\090\000\091\000\017\001\004\001\
\011\001\026\001\007\001\026\001\009\001\029\001\011\001\026\001\
\013\001\011\001\015\001\000\000\017\001\018\001\004\001\020\001\
\010\001\000\000\023\001\011\001\058\000\006\000\011\001\025\000\
\029\001\030\001\031\001\069\000\004\001\255\255\255\255\007\001\
\255\255\009\001\255\255\255\255\000\000\013\001\255\255\015\001\
\255\255\017\001\018\001\255\255\020\001\255\255\004\001\023\001\
\006\001\007\001\008\001\009\001\010\001\029\001\030\001\031\001\
\255\255\255\255\002\001\003\001\004\001\000\000\006\001\007\001\
\008\001\009\001\010\001\255\255\012\001\255\255\014\001\255\255\
\255\255\255\255\255\255\019\001\255\255\002\001\003\001\004\001\
\024\001\006\001\007\001\008\001\009\001\010\001\000\000\012\001\
\255\255\014\001\255\255\255\255\255\255\255\255\019\001\255\255\
\021\001\003\001\004\001\255\255\006\001\007\001\008\001\009\001\
\010\001\255\255\012\001\255\255\014\001\255\255\255\255\000\000\
\255\255\019\001\255\255\255\255\022\001\001\001\002\001\003\001\
\004\001\255\255\006\001\007\001\008\001\009\001\010\001\255\255\
\012\001\255\255\014\001\255\255\255\255\255\255\255\255\019\001\
\000\000\002\001\003\001\004\001\005\001\006\001\007\001\008\001\
\009\001\010\001\255\255\012\001\255\255\014\001\255\255\255\255\
\255\255\255\255\019\001\255\255\255\255\255\255\002\001\003\001\
\004\001\000\000\006\001\007\001\008\001\009\001\010\001\255\255\
\012\001\255\255\014\001\255\255\016\001\003\001\004\001\019\001\
\006\001\007\001\008\001\009\001\010\001\255\255\012\001\255\255\
\014\001\255\255\000\000\255\255\255\255\019\001\255\255\255\255\
\255\255\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\255\255\014\001\255\255\
\016\001\255\255\255\255\019\001\000\000\021\001\022\001\255\255\
\024\001\025\001\001\001\002\001\003\001\004\001\005\001\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\000\000\014\001\
\025\001\016\001\255\255\255\255\019\001\000\000\021\001\022\001\
\255\255\024\001\025\001\001\001\002\001\003\001\255\255\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\000\000\
\014\001\255\255\016\001\255\255\255\255\019\001\000\000\021\001\
\022\001\255\255\024\001\025\001\001\001\002\001\003\001\255\255\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\000\000\014\001\255\255\016\001\255\255\255\255\019\001\255\255\
\021\001\022\001\255\255\024\001\025\001\001\001\002\001\003\001\
\255\255\005\001\006\001\007\001\255\255\009\001\010\001\011\001\
\012\001\255\255\014\001\255\255\016\001\255\255\255\255\019\001\
\255\255\021\001\022\001\255\255\024\001\025\001\001\001\002\001\
\003\001\255\255\005\001\006\001\007\001\255\255\009\001\010\001\
\011\001\012\001\255\255\014\001\255\255\016\001\255\255\255\255\
\019\001\255\255\021\001\022\001\255\255\024\001\025\001\001\001\
\002\001\003\001\255\255\005\001\255\255\255\255\255\255\255\255\
\255\255\011\001\012\001\255\255\014\001\255\255\016\001\255\255\
\255\255\019\001\255\255\021\001\022\001\255\255\024\001\025\001\
\001\001\002\001\003\001\255\255\005\001\255\255\255\255\255\255\
\255\255\255\255\011\001\012\001\255\255\014\001\255\255\016\001\
\255\255\255\255\019\001\255\255\021\001\022\001\255\255\024\001\
\025\001\001\001\002\001\003\001\255\255\005\001\255\255\255\255\
\255\255\255\255\255\255\011\001\012\001\255\255\014\001\255\255\
\016\001\255\255\255\255\019\001\255\255\021\001\022\001\255\255\
\024\001\025\001\001\001\002\001\003\001\255\255\005\001\255\255\
\255\255\255\255\255\255\255\255\011\001\012\001\255\255\014\001\
\255\255\016\001\255\255\255\255\019\001\255\255\021\001\022\001\
\255\255\024\001\025\001\001\001\002\001\003\001\255\255\005\001\
\255\255\255\255\255\255\255\255\255\255\011\001\012\001\255\255\
\014\001\255\255\016\001\255\255\255\255\019\001\255\255\021\001\
\022\001\255\255\024\001\025\001\255\255\001\001\002\001\255\255\
\255\255\005\001\255\255\255\255\255\255\255\255\255\255\011\001\
\255\255\255\255\255\255\255\255\016\001\255\255\255\255\001\001\
\002\001\021\001\022\001\005\001\024\001\025\001\001\001\002\001\
\255\255\011\001\005\001\255\255\255\255\255\255\016\001\255\255\
\011\001\255\255\255\255\021\001\022\001\016\001\024\001\025\001\
\001\001\002\001\021\001\022\001\005\001\024\001\025\001\001\001\
\002\001\255\255\011\001\005\001\255\255\255\255\255\255\016\001\
\255\255\011\001\255\255\255\255\021\001\022\001\016\001\024\001\
\025\001\001\001\255\255\021\001\255\255\005\001\024\001\025\001\
\255\255\255\255\255\255\011\001\255\255\255\255\255\255\255\255\
\016\001\255\255\255\255\255\255\255\255\021\001\022\001\255\255\
\024\001\025\001\002\001\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\010\001\255\255\012\001\255\255\014\001\255\255\
\002\001\003\001\004\001\019\001\006\001\007\001\008\001\009\001\
\010\001\255\255\012\001\255\255\014\001\255\255\255\255\003\001\
\004\001\019\001\006\001\007\001\008\001\009\001\010\001\255\255\
\012\001\255\255\014\001"

let yynames_const = "\
  COMMA\000\
  SEMICOLON\000\
  COLON\000\
  LPAREN\000\
  RPAREN\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  LT\000\
  EQ\000\
  GT\000\
  AND\000\
  NOT\000\
  OR\000\
  WHILE\000\
  DO\000\
  REF\000\
  BANG\000\
  ASSIGN\000\
  IF\000\
  THEN\000\
  ELSE\000\
  LET\000\
  IN\000\
  FUN\000\
  ARROW\000\
  TYPE\000\
  UMINUS\000\
  EOF\000\
  "

let yynames_block = "\
  ID\000\
  NUM\000\
  PROJ\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Absyn.fundec list) in
    Obj.repr(
# 50 "lib/funpar.mly"
                                ( _1 )
# 365 "lib/funpar.ml"
               : Absyn.prog))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Absyn.fundec) in
    Obj.repr(
# 52 "lib/funpar.mly"
                                ( [_1] )
# 372 "lib/funpar.ml"
               : Absyn.fundec list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Absyn.fundec) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Absyn.fundec list) in
    Obj.repr(
# 53 "lib/funpar.mly"
                                ( _1::_2 )
# 380 "lib/funpar.ml"
               : Absyn.fundec list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 9 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 5 : Absyn.tp) in
    let _9 = (Parsing.peek_val __caml_parser_env 2 : Absyn.tp) in
    let _11 = (Parsing.peek_val __caml_parser_env 0 : Absyn.exp) in
    Obj.repr(
# 55 "lib/funpar.mly"
                                                          ( ((start_pos (), end_pos ()), (S.symbol _2, S.symbol _4, _6, _9, _11)) )
# 391 "lib/funpar.ml"
               : Absyn.fundec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 57 "lib/funpar.mly"
                                ( if _1 = "int" then A.Inttp else (Errormsg.error((start_pos (), end_pos ()), "undefined type"); A.Inttp) )
# 398 "lib/funpar.ml"
               : Absyn.tp))
; (fun __caml_parser_env ->
    Obj.repr(
# 58 "lib/funpar.mly"
                                ( A.Tupletp([]) )
# 404 "lib/funpar.ml"
               : Absyn.tp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Absyn.tp list) in
    Obj.repr(
# 59 "lib/funpar.mly"
                                ( A.Tupletp(_2) )
# 411 "lib/funpar.ml"
               : Absyn.tp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Absyn.tp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Absyn.tp) in
    Obj.repr(
# 60 "lib/funpar.mly"
                                ( A.Arrowtp(_1,_3) )
# 419 "lib/funpar.ml"
               : Absyn.tp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Absyn.tp) in
    Obj.repr(
# 61 "lib/funpar.mly"
                                ( A.Reftp(_1) )
# 426 "lib/funpar.ml"
               : Absyn.tp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Absyn.tp) in
    Obj.repr(
# 62 "lib/funpar.mly"
                                ( _2 )
# 433 "lib/funpar.ml"
               : Absyn.tp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Absyn.tp) in
    Obj.repr(
# 64 "lib/funpar.mly"
                                ( [_1] )
# 440 "lib/funpar.ml"
               : Absyn.tp list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Absyn.tp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Absyn.tp list) in
    Obj.repr(
# 65 "lib/funpar.mly"
                                ( _1::_3 )
# 448 "lib/funpar.ml"
               : Absyn.tp list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Absyn.exp) in
    Obj.repr(
# 67 "lib/funpar.mly"
                                ( [_1] )
# 455 "lib/funpar.ml"
               : Absyn.exp list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Absyn.exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Absyn.exp list) in
    Obj.repr(
# 68 "lib/funpar.mly"
                                ( _1::_3 )
# 463 "lib/funpar.ml"
               : Absyn.exp list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Absyn.exp) in
    Obj.repr(
# 70 "lib/funpar.mly"
                                ( A.Pos((start_pos (), end_pos ()), _2) )
# 470 "lib/funpar.ml"
               : Absyn.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 71 "lib/funpar.mly"
                                ( A.Pos((start_pos (), end_pos ()), A.Id (S.symbol _1)) )
# 477 "lib/funpar.ml"
               : Absyn.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 72 "lib/funpar.mly"
                                ( A.Pos((start_pos (), end_pos ()), A.Int(_1)) )
# 484 "lib/funpar.ml"
               : Absyn.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : int) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Absyn.exp) in
    Obj.repr(
# 73 "lib/funpar.mly"
                                ( if _1 < 0 then (Errormsg.error((start_pos (), end_pos ()),"The index of projection is less than 0");
                                  A.Pos((start_pos (), end_pos ()), A.Proj(_1, _2))) else
                                  A.Pos((start_pos (), end_pos ()), A.Proj(_1, _2)) )
# 494 "lib/funpar.ml"
               : Absyn.exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Absyn.exp) in
    Obj.repr(
# 76 "lib/funpar.mly"
                                ( A.Pos((start_pos (), end_pos ()), A.Op(A.Ref, [_2])) )
# 501 "lib/funpar.ml"
               : Absyn.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Absyn.exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Absyn.exp) in
    Obj.repr(
# 77 "lib/funpar.mly"
                                ( A.Pos((start_pos (), end_pos ()), A.Call (_1, _3)) )
# 509 "lib/funpar.ml"
               : Absyn.exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Absyn.exp) in
    Obj.repr(
# 78 "lib/funpar.mly"
                                ( A.Pos((start_pos (), end_pos ()), A.Op(A.Get, [_2])) )
# 516 "lib/funpar.ml"
               : Absyn.exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Absyn.exp) in
    Obj.repr(
# 79 "lib/funpar.mly"
                                ( A.Pos((start_pos (), end_pos ()), A.Op(A.Sub, [A.Int(0); _2])) )
# 523 "lib/funpar.ml"
               : Absyn.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Absyn.exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Absyn.exp) in
    Obj.repr(
# 80 "lib/funpar.mly"
                                ( A.Pos((start_pos (), end_pos ()), A.Op(A.Mul, [_1; _3])) )
# 531 "lib/funpar.ml"
               : Absyn.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Absyn.exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Absyn.exp) in
    Obj.repr(
# 81 "lib/funpar.mly"
                                ( A.Pos((start_pos (), end_pos ()), A.Op(A.Add, [_1; _3])) )
# 539 "lib/funpar.ml"
               : Absyn.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Absyn.exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Absyn.exp) in
    Obj.repr(
# 82 "lib/funpar.mly"
                                ( A.Pos((start_pos (), end_pos ()), A.Op(A.Sub, [_1; _3])) )
# 547 "lib/funpar.ml"
               : Absyn.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Absyn.exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Absyn.exp) in
    Obj.repr(
# 83 "lib/funpar.mly"
                                ( A.Pos((start_pos (), end_pos ()), A.Op(A.Eq, [_1; _3])) )
# 555 "lib/funpar.ml"
               : Absyn.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Absyn.exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Absyn.exp) in
    Obj.repr(
# 84 "lib/funpar.mly"
                                ( A.Pos((start_pos (), end_pos ()), A.Op(A.LT, [_1; _3])) )
# 563 "lib/funpar.ml"
               : Absyn.exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Absyn.exp) in
    Obj.repr(
# 85 "lib/funpar.mly"
                                ( A.Pos((start_pos (), end_pos ()), A.If(_2,A.Int(0),A.Int(1))) )
# 570 "lib/funpar.ml"
               : Absyn.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Absyn.exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Absyn.exp) in
    Obj.repr(
# 86 "lib/funpar.mly"
                                ( A.Pos((start_pos (), end_pos ()), A.If(_1, A.If(_3, A.Int(1), A.Int(0)), A.Int(0))) )
# 578 "lib/funpar.ml"
               : Absyn.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Absyn.exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Absyn.exp) in
    Obj.repr(
# 87 "lib/funpar.mly"
                                ( A.Pos((start_pos (), end_pos ()), A.If(_1, A.Int(1), A.If(_3, A.Int(1), A.Int(0)))) )
# 586 "lib/funpar.ml"
               : Absyn.exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 88 "lib/funpar.mly"
                                ( A.Pos((start_pos (), end_pos ()), A.Tuple([])) )
# 592 "lib/funpar.ml"
               : Absyn.exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Absyn.exp list) in
    Obj.repr(
# 89 "lib/funpar.mly"
                                ( A.Pos((start_pos (), end_pos ()), A.Tuple(_2)) )
# 599 "lib/funpar.ml"
               : Absyn.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Absyn.exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Absyn.tp) in
    Obj.repr(
# 90 "lib/funpar.mly"
                                ( A.Pos((start_pos (), end_pos ()), A.Constrain(_1,_3)) )
# 607 "lib/funpar.ml"
               : Absyn.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Absyn.exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Absyn.exp) in
    Obj.repr(
# 91 "lib/funpar.mly"
                                ( A.Pos((start_pos (), end_pos ()), A.Op(A.Set, [_1;_3])) )
# 615 "lib/funpar.ml"
               : Absyn.exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Absyn.exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Absyn.exp) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Absyn.exp) in
    Obj.repr(
# 92 "lib/funpar.mly"
                                ( A.Pos((start_pos (), end_pos ()), A.If(_2,_4,_6)) )
# 624 "lib/funpar.ml"
               : Absyn.exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Absyn.exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Absyn.exp) in
    Obj.repr(
# 93 "lib/funpar.mly"
                                ( A.Pos((start_pos (), end_pos ()), A.If(_2,_4,A.Tuple([]))) )
# 632 "lib/funpar.ml"
               : Absyn.exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Absyn.exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Absyn.exp) in
    Obj.repr(
# 94 "lib/funpar.mly"
                                ( A.Pos((start_pos (), end_pos ()), A.While(_2,_4)) )
# 640 "lib/funpar.ml"
               : Absyn.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Absyn.exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Absyn.exp) in
    Obj.repr(
# 95 "lib/funpar.mly"
                                ( A.Pos((start_pos (), end_pos ()), A.Let(S.symbol "let",_1,_3)) )
# 648 "lib/funpar.ml"
               : Absyn.exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Absyn.exp) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Absyn.exp) in
    Obj.repr(
# 96 "lib/funpar.mly"
                                ( A.Pos((start_pos (), end_pos ()), A.Let(S.symbol _2,_4,_6)) )
# 657 "lib/funpar.ml"
               : Absyn.exp))
(* Entry prog *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let prog (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Absyn.prog)
